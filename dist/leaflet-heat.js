"use strict";function simpleheat(t){if(!(this instanceof simpleheat))return new simpleheat(t);this._canvas=t="string"==typeof t?document.getElementById(t):t,this._ctx=t.getContext("2d"),this._width=t.width,this._height=t.height,this._sorted=!1,this._options=this.defaultOptions,this._data=[]}"undefined"!=typeof module&&(module.exports=simpleheat),simpleheat.prototype={defaultGradient:{"0.0":"rgba(204, 0, 0, 1)",.25:"rgba(255, 178, 0, 0.75)",.5:"rgba(0, 243, 255, 0.25)",.75:"rgba(180, 255, 0, 0.75)","1.0":"rgba(0, 214, 96, 1)"},data:function(t){return this._data=t,this._sorted=!1,this},add:function(t){return this._data.push(t),this._sorted=!1,this},clear:function(){return this._data=[],this},defaultOptions:{blendMode:"overlay",max:1,radius:25,blur:15,gradient:{"0.0":"rgba(204, 0, 0, 1)",.25:"rgba(255, 178, 0, 0.75)",.5:"rgba(0, 243, 255, 0.25)",.75:"rgba(180, 255, 0, 0.75)","1.0":"rgba(0, 214, 96, 1)"},colorize:!0,grayscale:{negative:"#000000",neutral:"#808080",positive:"#FFFFFF"}},setOptions:function(t){return this._options=Object.assign({},this._options,t),delete this._circles,delete this._grad,this},getOptions:function(){return Object.assign({},this._options)},initializeCircleBrushes:function(){var t=this._options.grayscale;this._circles={};var i=this._r=this._options.radius+this._options.blur;for(var a in t){var s=t[a],e=this._circles[a]=this._createCanvas(),n=e.getContext("2d");e.width=e.height=2*i,n.shadowOffsetX=n.shadowOffsetY=2*i,n.fillStyle=s,n.shadowColor=s,n.shadowBlur=this._options.blur,n.beginPath(),n.arc(-i,-i,this._options.radius,0,2*Math.PI,!0),n.closePath(),n.fill()}},resize:function(){this._width=this._canvas.width,this._height=this._canvas.height},initializeGradient:function(){var t=this._createCanvas(),i=t.getContext("2d"),a=i.createLinearGradient(0,0,0,256);t.width=1,t.height=256;for(var s in this._options.gradient)a.addColorStop(+s,this._options.gradient[s]);return i.fillStyle=a,i.fillRect(0,0,1,256),this._grad=i.getImageData(0,0,1,256).data,this},draw:function(t){this._circles||this.initializeCircleBrushes(this.defaultRadius),this._grad||this.initializeGradient(),this._sorted||(this._data.sort(function(t,i){return t[3]-i[3]}),this._sorted=!0);var i=this._ctx;i.globalCompositeOperation=this._options.blendMode,i.clearRect(0,0,this._width,this._height);for(var a,s=this._circles.negative,e=this._circles.neutral,n=this._circles.positive,h=0,o=this._data.length;h<o;h++){a=this._data[h],i.globalAlpha=Math.max(a[2]/this._options.max,void 0===t?.05:t);var r=a[3]>0?n:a[3]<0?s:e;i.drawImage(r,a[0]-this._r,a[1]-this._r)}var _=i.getImageData(0,0,this._width,this._height);return this._colorize(_.data,this._grad),i.putImageData(_,0,0),this},_colorize:function(t,i){if(this._options.colorize)for(var a,s=0,e=t.length;s<e;s+=4){var n=t[s+3];n&&(a=4*t[s],t[s]=i[a],t[s+1]=i[a+1],t[s+2]=i[a+2],t[s+3]=Math.floor(i[a+3]/256*(n/256)*256))}},_createCanvas:function(){return"undefined"!=typeof document?document.createElement("canvas"):new this._canvas.constructor}},L.HeatLayer=(L.Layer?L.Layer:L.Class).extend({initialize:function(t,i){this._latlngs=t,L.setOptions(this,i)},setLatLngs:function(t){return this._latlngs=t,this.redraw()},addLatLng:function(t){return this._latlngs.push(t),this.redraw()},setOptions:function(t){return L.setOptions(this,t),this._heat&&this._updateOptions(),this.redraw()},redraw:function(){return this._heat&&!this._frame&&this._map&&!this._map._animating&&(this._frame=L.Util.requestAnimFrame(this._redraw,this)),this},onAdd:function(t){this._map=t,this._canvas||this._initCanvas(),this.options.pane?this.getPane().appendChild(this._canvas):t._panes.overlayPane.appendChild(this._canvas),t.on("moveend",this._reset,this),t.options.zoomAnimation&&L.Browser.any3d&&t.on("zoomanim",this._animateZoom,this),this._reset()},onRemove:function(t){this.options.pane?this.getPane().removeChild(this._canvas):t.getPanes().overlayPane.removeChild(this._canvas),t.off("moveend",this._reset,this),t.options.zoomAnimation&&t.off("zoomanim",this._animateZoom,this)},addTo:function(t){return t.addLayer(this),this},_initCanvas:function(){var t=this._canvas=L.DomUtil.create("canvas","leaflet-heatmap-layer leaflet-layer"),i=L.DomUtil.testProp(["transformOrigin","WebkitTransformOrigin","msTransformOrigin"]);t.style[i]="50% 50%";var a=this._map.getSize();t.width=a.x,t.height=a.y;var s=this._map.options.zoomAnimation&&L.Browser.any3d;L.DomUtil.addClass(t,"leaflet-zoom-"+(s?"animated":"hide")),this._heat=simpleheat(t),this._updateOptions()},_updateOptions:function(){console.log(this._heat),this._heat.setOptions(this.options)},_reset:function(){var t=this._map.containerPointToLayerPoint([0,0]);L.DomUtil.setPosition(this._canvas,t);var i=this._map.getSize();this._heat._width!==i.x&&(this._canvas.width=this._heat._width=i.x),this._heat._height!==i.y&&(this._canvas.height=this._heat._height=i.y),this._redraw()},_redraw:function(){if(this._map){var t,i,a,s,e,n,h,o,r,_,l=[],d=this._heat._r,c=this._map.getSize(),m=new L.Bounds(L.point([-d,-d]),c.add([d,d])),p=void 0===this.options.max?1:this.options.max,g=void 0===this.options.maxZoom?this._map.getMaxZoom():this.options.maxZoom,u=1/Math.pow(2,Math.max(0,Math.min(g-this._map.getZoom(),12))),f=d/2,v=[],y=this._map._getMapPanePos(),w=y.x%f,x=y.y%f;for(t=0,i=this._latlngs.length;t<i;t++)if(a=this._map.latLngToContainerPoint(this._latlngs[t]),m.contains(a)){e=Math.floor((a.x-w)/f)+2,n=Math.floor((a.y-x)/f)+2;var b=void 0!==this._latlngs[t].alt?this._latlngs[t].alt:void 0!==this._latlngs[t][2]?+this._latlngs[t][2]:1;_=(void 0===this._latlngs[t][3]?1:this._latlngs[t][3])+1,r=b*u,v[n]=v[n]||[],v[n][e]=v[n][e]||[],s=v[n][e][_],s?(s[0]=(s[0]*s[2]+a.x*r)/(s[2]+r),s[1]=(s[1]*s[2]+a.y*r)/(s[2]+r),s[2]+=r):v[n][e][_]=[a.x,a.y,r,_]}for(var t=0,i=v.length;t<i;t++)if(v[t])for(var h=0,o=v[t].length;h<o;h++)if(v[t][h])for(var r=0,O=v[t][h].length;r<O;r++)(s=v[t][h][r])&&l.push([Math.round(s[0]),Math.round(s[1]),Math.min(s[2],p),s[3]-1]);this._heat.data(l).draw(this.options.minOpacity),this._frame=null}},_animateZoom:function(t){var i=this._map.getZoomScale(t.zoom),a=this._map._getCenterOffset(t.center)._multiplyBy(-i).subtract(this._map._getMapPanePos());L.DomUtil.setTransform?L.DomUtil.setTransform(this._canvas,a,i):this._canvas.style[L.DomUtil.TRANSFORM]=L.DomUtil.getTranslateString(a)+" scale("+i+")"}}),L.heatLayer=function(t,i){return new L.HeatLayer(t,i)};
//# sourceMappingURL=data:application/json;charset=utf-8;base64,